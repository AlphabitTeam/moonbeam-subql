type Block @entity {
  id: ID!
  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: Int
  stateRoot: String
  extrinsicsRoot: String
  #size: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!
  hash: String!
  block: Block!
  blockNumber: BigInt! @index(unique: false)
  index: Int!
  isSigned: Boolean
  signer: Account
  section: String
  method: String
  success: Boolean
  #arguments: String
}

type Event @entity {
  id: ID!
  block: Block!
  blockNumber: BigInt! @index(unique: false)
  index: Int!
  section: String
  method: String
  #docs: String
  #arguments: String
  #data: String
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!
  nonce: Int
  updateAt: BigInt
  #name: String
  # Balance
  totalBalance: BigInt
  freeBalance: BigInt
  reducibleBalance: BigInt
  reservedBalance: BigInt
  miscFrozenBalance: BigInt
  feeFrozenBalance: BigInt
  # Contracts
  isContract: Boolean
  creator: Account
  createdAt: String
}

type Log @entity {
  id: ID!
  blockNumber: BigInt
  transaction: Transaction
  transactionIndex: Int
  logIndex: Int
  timestamp: Date
  address: String
  #data: String
  #topics: String
  #arguments: String
  removed: Boolean
}

type Transaction @entity {
  id: ID!
  # MoonbeamCall.blockNumber? type, that's why it isn't Block!
  block: Block
  blockNumber: BigInt
  #extrinsic: Extrinsic
  #extrinsicIndex: Int
  from: Account
  to: Account
  success: Boolean
  value: BigInt
  nonce: Int
  gasLimit: BigInt
  gasPrice: BigInt
  maxFeePerGas: BigInt
  type: Int
  #data: String
  #arguments: String
  logs: [Log] @derivedFrom(field: "transaction")
  # gasUsed/fee, extrinsic, transfers
}

type Transfer @entity {
  id: ID!
  index: Int!
  block: Block!
  blockNumber: BigInt! @index(unique: false)
  from: Account!
  to: Account!
  value: BigInt!
  extrinsic: Extrinsic
}
